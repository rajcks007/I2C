#include "stm32f4xx_hal.h"

#define LSM6DSL_I2C_ADDRESS      0xD6   // LSM6DSL I2C address
#define LSM6DSL_ID               0x6A   // Expected device ID for LSM6DSL
#define OK                       1
#define ERROR                    0

// LSM6DSL Register Addresses
#define LSM6DSL_WHO_AM_I         0x0F
#define LSM6DSL_CTRL1_XL         0x10
#define LSM6DSL_CTRL2_G          0x11
#define LSM6DSL_CTRL3_C          0x12
#define LSM6DSL_STATUS_REG       0x1E

// Accelerometer and Gyroscope settings
#define LSM6DSL_XL_ODR_104Hz     0x40   // Accelerometer ODR 104 Hz
#define LSM6DSL_GY_ODR_104Hz     0x40   // Gyroscope ODR 104 Hz
#define LSM6DSL_2g               0x00   // Full scale 2g for accelerometer
#define LSM6DSL_2000dps          0x0C   // Full scale 2000dps for gyroscope

extern I2C_HandleTypeDef hi2c1;         // I2C handle

// Helper function to write data to a specific register
void LSM6DSL_write_register(uint8_t reg, uint8_t data) {
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}

// Helper function to read data from a specific register
uint8_t LSM6DSL_read_register(uint8_t reg) {
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
    return data;
}

// Get the ID of the LSM6DSL sensor
uint8_t LSM6DSL_get_ID(void) {
    return LSM6DSL_read_register(LSM6DSL_WHO_AM_I);
}

// Perform a software reset on the LSM6DSL sensor
void LSM6DSL_set_sw_reset(uint8_t enable) {
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
    if (enable) {
        ctrl3_c |= 0x01;  // Set the SW_RESET bit
    } else {
        ctrl3_c &= ~0x01; // Clear the SW_RESET bit
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
}

// Set accelerometer data rate and full scale
void LSM6DSL_set_data_rate_xl(uint8_t data_rate) {
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
    ctrl1_xl = (ctrl1_xl & ~0xF0) | data_rate;  // Mask and set ODR bits
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
}

void LSM6DSL_set_full_scale_xl(uint8_t full_scale) {
    uint8_t ctrl1_xl = LSM6DSL_read_register(LSM6DSL_CTRL1_XL);
    ctrl1_xl = (ctrl1_xl & ~0x0C) | full_scale;  // Mask and set full-scale bits
    LSM6DSL_write_register(LSM6DSL_CTRL1_XL, ctrl1_xl);
}

// Set gyroscope data rate and full scale
void LSM6DSL_set_data_rate_gy(uint8_t data_rate) {
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
    ctrl2_g = (ctrl2_g & ~0xF0) | data_rate;  // Mask and set ODR bits
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
}

void LSM6DSL_set_full_scale_gy(uint8_t full_scale) {
    uint8_t ctrl2_g = LSM6DSL_read_register(LSM6DSL_CTRL2_G);
    ctrl2_g = (ctrl2_g & ~0x0C) | full_scale;  // Mask and set full-scale bits
    LSM6DSL_write_register(LSM6DSL_CTRL2_G, ctrl2_g);
}

// Enable/Disable block data update
void LSM6DSL_set_block_data_update(uint8_t enable) {
    uint8_t ctrl3_c = LSM6DSL_read_register(LSM6DSL_CTRL3_C);
    if (enable) {
        ctrl3_c |= 0x40;  // Set the BDU bit (Block Data Update)
    } else {
        ctrl3_c &= ~0x40; // Clear the BDU bit
    }
    LSM6DSL_write_register(LSM6DSL_CTRL3_C, ctrl3_c);
}

// Initialize the LSM6DSL sensor
uint8_t LSM6DSL_init(void) {
    uint8_t rv = ERROR;    // return value indicating failure

    // Set chip select (if using SPI, otherwise not needed for I2C)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Assume PA9 is CS for SPI, not used for I2C

    // Check if the device ID matches the expected ID
    if (LSM6DSL_get_ID() == LSM6DSL_ID) {
        LSM6DSL_set_sw_reset(1);                      // Reset the sensor
        HAL_Delay(100);                               // Delay after reset
        LSM6DSL_set_sw_reset(0);                      // End reset

        // Set accelerometer and gyroscope settings
        LSM6DSL_set_data_rate_xl(LSM6DSL_XL_ODR_104Hz);
        LSM6DSL_set_full_scale_xl(LSM6DSL_2g);
        LSM6DSL_set_data_rate_gy(LSM6DSL_GY_ODR_104Hz);
        LSM6DSL_set_full_scale_gy(LSM6DSL_2000dps);

        // Enable block data update to prevent partial reads
        LSM6DSL_set_block_data_update(1);

        rv = OK;         // Initialization successful
    }

   return rv;
}
