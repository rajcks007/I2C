// Enable Data Ready Interrupt on INT1 Pin for accelerometer (XL) and gyroscope (G)
void LSM6DSL_EnableInterrupts(void)
{
    uint8_t data;

    // Configure INT1_CTRL (0x0D): Enable interrupt for accelerometer and gyroscope data ready
    data = 0x03;  // Bit 0 = 1 (XL_DRDY), Bit 1 = 1 (G_DRDY)
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_I2C_ADDRESS, 0x0D, 1, &data, 1, HAL_MAX_DELAY);

    // CTRL3_C (0x12): Enable interrupts, auto increment register address during multi-byte read
    data = 0x04;  // Set IF_INC bit (auto increment)
    HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_I2C_ADDRESS, 0x12, 1, &data, 1, HAL_MAX_DELAY);
}

// Global variable to store data from the sensor
uint8_t i2c_rx_buffer[6];  // To store accelerometer or gyroscope data

// Interrupt callback for EXTI (from LSM6DSL INT1 or INT2 pin)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == GPIO_PIN_0)  // Assuming PA0 is connected to INT1 or INT2
    {
        // Start I2C read operation to get data from the LSM6DSL
        // Reading 6 bytes (e.g., accelerometer data from OUTX_L_XL register)
        HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, LSM6DSL_OUTX_L_XL, 1, i2c_rx_buffer, 6);
    }
}

// Callback function when I2C read is complete
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
    if(hi2c->Instance == I2C1)  // Check if this is I2C1
    {
        int16_t accel_x = (int16_t)(i2c_rx_buffer[1] << 8 | i2c_rx_buffer[0]);
        int16_t accel_y = (int16_t)(i2c_rx_buffer[3] << 8 | i2c_rx_buffer[2]);
        int16_t accel_z = (int16_t)(i2c_rx_buffer[5] << 8 | i2c_rx_buffer[4]);

        // Now accel_x, accel_y, accel_z contain the acceleration data
        // Process or send over UART as needed
    }
}
